--altaccumulate CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone III" WIDTH_IN=8 WIDTH_OUT=16 add_sub(vcc) clken(vcc) clock data
--VERSION_BEGIN 13.0 cbx_altaccumulate 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneiii_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 16 reg 16 
SUBDESIGN accum_j0d
( 
	add_sub	:	input;
	clken	:	input;
	clock	:	input;
	data[7..0]	:	input;
	result[15..0]	:	output;
) 
VARIABLE 
	acc_cella[15..0] : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "96E8",
			SUM_LUTC_INPUT = "cin"
		);
	acc_ffa[15..0] : dffe;
	const_node_add_sub	: NODE;
	const_node_clken	: NODE;
	data_wire[15..0]	: WIRE;

BEGIN 
	acc_cella[].cin = ( acc_cella[14..0].cout, B"0");
	acc_cella[].dataa = acc_ffa[].q;
	acc_cella[].datab = data_wire[];
	acc_cella[].datad = B"1111111111111111";
	acc_ffa[].clk = clock;
	acc_ffa[].d = acc_cella[].combout;
	const_node_add_sub = add_sub;
	const_node_clken = clken;
	data_wire[] = ( B"00000000", data[]);
	result[] = acc_ffa[].q;
END;
--VALID FILE
